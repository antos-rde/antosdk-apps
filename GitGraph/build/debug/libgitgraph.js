var OS;!function(t){let s;!function(s){s.LibGitGraph=class{constructor(t){this._base_dir=void 0,this.lines_data=[],this.commits={},this.oldest_commit_date=void 0,this.svg_element=void 0,this.commits_list_element=void 0,this.load_more_el=void 0,this.commit_detail_el=void 0,this.current_head=void 0,this._on_open_diff=void 0,this.options={commits_per_page:100,x_offset:24,y_offset:24,target:void 0,popup_height:250};for(const s in t)this.options[s]=t[s];this.options.target&&$(this.options.target).addClass("git_grapth_container").css("overflow-y","auto").css("overflow-x","hidden").css("display","block").css("position","relative")}set base_dir(t){this._base_dir=t,t&&(this.init_graph(),this.render_next())}gen_color(t){let s=t+10;const e=[0,0,0];for(let t=0;t<24;t++)e[t%3]<<=1,e[t%3]|=1&s,s>>=1;return"#"+e.reduce((t,s)=>(s>15?s.toString(16):"0"+s.toString(16))+t,"")}meta(){return t.setting.system.packages.GitGraph}call(t){return new Promise(async(e,i)=>{t.args.base_dir=this._base_dir.path;let o={path:this.meta().path+"/api/api.lua",parameters:t},a=await s.apigateway(o,!1);a.error?i(s.throwe(__("LibGitGrapth server call error: {0}",a.error))):e(a.result)})}load(t){let s={action:"log",args:{n_commits:this.options.commits_per_page.toString(),before:t||null}};return this.call(s)}error(s){t.announcer.oserror(__("GitGraph error: {0}",s.toString()),s)}set on_open_diff(t){this._on_open_diff=t}init_graph(){if(!this.options.target)return this.error(s.throwe("Target element is undefined"));this.current_y_offset=this.options.y_offset,this.lines_data=[],this.commits={},this.oldest_commit_date=void 0,this.svg_element=void 0,this.commits_list_element=void 0,this.load_more_el=void 0,this.commit_detail_el=void 0,this.current_head=void 0,$(this.options.target).empty(),this.svg_element=this.make_svg_el("svg",{width:this.options.x_offset,height:this.options.y_offset}),$(this.svg_element).css("display","block").css("position","absolute").css("left","0").css("top","0"),this.options.target.appendChild(this.svg_element);const t=$("<div />").css("position","absolute").css("left","0").css("top","0").css("width","100%").css("padding-top",this.options.y_offset/2+"px");this.commits_list_element=t[0],this.options.target.appendChild(this.commits_list_element);const e=$("<p />").css("height",this.options.y_offset+"px").css("display","block").css("padding","0").css("margin","0").css("line-height",this.options.y_offset+"px").css("vertical-align","middle");e.addClass("git_grapth_load_more"),e.on("click",t=>this.render_next()),e.text(__("More").__()),this.load_more_el=e[0],this.commits_list_element.appendChild(this.load_more_el);const i=$("<div />").css("position","absolute").css("top","0").css("height",this.options.popup_height+"px").css("display","none").css("user-select","text").addClass("git_grapth_commit_detail");this.commit_detail_el=i[0],this.options.target.appendChild(this.commit_detail_el)}render_next(){null!=this._base_dir&&this.load(this.oldest_commit_date).then(t=>{this.oldest_commit_date&&t.shift(),this.draw_graph(t)}).catch(t=>this.error(t))}make_svg_el(t,s){const e=document.createElementNS("http://www.w3.org/2000/svg",t);for(var i in s)e.setAttribute(i,s[i]);return e}max_line_off_x(){return 0==this.lines_data.length?0:Math.max.apply(Math,this.lines_data.map(t=>t.x_offset))}update_line_data(t,s){const e=t.hashes.parents.split(" "),i=this.lines_data.filter(s=>s.next_commit==t.hashes.commit);let o={src:[],dest:void 0};if(0===i.length){let i={next_commit:e[0],x_offset:this.max_line_off_x()+this.options.x_offset,current_commit:t.hashes.commit,beginning:!0,y_offset:s,color:this.gen_color(this.lines_data.length)};this.lines_data.push(i),o.dest=i}else{let a=Math.min.apply(Math,i.map(t=>t.x_offset)),_=void 0;for(let n of i)n.x_offset==a?(_=n,_.next_commit=e[0],_.current_commit=t.hashes.commit,_.y_offset=s):(this.lines_data.splice(this.lines_data.indexOf(n),1),o.src.push(n));o.dest=_}if(2===e.length){let i=void 0;i=this.lines_data.filter(t=>t.next_commit==e[1])[0],i?i.y_offset=s+this.options.y_offset:(i={next_commit:e[1],x_offset:this.max_line_off_x()+this.options.x_offset,current_commit:t.hashes.commit,beginning:!0,y_offset:s+this.options.y_offset,color:this.gen_color(this.lines_data.length)},this.lines_data.push(i)),o.src.push(i)}return o}draw_line(t,s,e,i,o,a){let _={stroke:o,fill:"none","stroke-width":1.5};if(a&&(_["stroke-width"]=a),t==e)_.d=`M ${t},${s} L ${e},${i}`;else{let o=t,a=s,n=e,h=i,l=(Math.abs(n-o),Math.abs(h-a));s<i&&(o=e,a=i,n=t,h=s),_.d=`M ${o},${a} C  ${o},${a-l} ${n},${h+l}  ${n},${h}`}return this.make_svg_el("path",_)}gen_commit_data_header(t,s){const e=$("<p />").css("display","block");return e[0].innerHTML=`<b>${t.__()}</b>: ${s}`,e[0]}open_popup(s){const e=s.domel;if(!e)return;$(this.commit_detail_el).empty();const i=$(e).position(),o=this.svg_element.getBBox(),a=o.x+o.width+this.options.x_offset/2,_=this.make_svg_el("svg",{width:a-s.cx+5,height:this.options.y_offset});$(_).css("display","block").css("position","absolute").css("left","0").css("top","-2px"),_.appendChild(this.draw_line(0,this.options.y_offset/2,a-s.cx,this.options.y_offset/2,s.color)),$(this.commit_detail_el).css("border","2px solid "+s.color).css("color",s.color).append($("<div />").css("position","absolute").css("height",this.options.y_offset).css("left",s.cx-a).css("padding-left",a-s.cx).append(_).append($("<i/>").text("[X]").css("cursor","pointer")).addClass("git_grapth_commit_detail_ctrl").on("click",t=>{$(this.commit_detail_el).css("display","none").empty()}));const n=$("<div />").css("display","block").css("overflow-y","auto").css("overflow-x","hidden").css("flex","1").css("border-right","1px solid "+s.color).addClass("git_grapth_commit_detail_left"),h=$("<div />").css("display","block").css("overflow-y","auto").css("overflow-x","hidden").css("flex","1").addClass("git_grapth_commit_detail_right");n.append(this.gen_commit_data_header(__("Commit"),s.hashes.commit)),n.append(this.gen_commit_data_header(__("Parents"),s.hashes.parents)),n.append(this.gen_commit_data_header(__("Author"),`${s.committer.name} &lt;${s.committer.email}&gt;`)),n.append(this.gen_commit_data_header(__("Date"),new Date(s.committer.date).toDateString())),n.append($("<pre />").css("white-space","pre-wrap").text(s.message)),this.commit_detail_el.appendChild(n[0]),this.commit_detail_el.appendChild(h[0]),this.list_file(s.hashes.commit).then(e=>{const i=$("<ul/>");$.each(e,(e,o)=>{const a=o.split("\t"),_=$("<li/>"),n=$("<a/>").css("cursor","pointer").addClass("git_graph_file_"+a[0].toLowerCase()).on("click",e=>{this._on_open_diff&&Promise.all([this.get_file(a[1],s.hashes.commit+"^"),this.get_file(a[1],s.hashes.commit)]).then(t=>{const e=t.map((t,e)=>{const i=`mem://${s.hashes.commit.slice(0,8)}${0==e?"^":""}/${a[1]}`.asFileHandle();return i.cache=t,i.info.mime="text/plain",i});this._on_open_diff(e)}).catch(e=>{t.announcer.oserror(__("Unable to fetch diff of {0}: {1}",s.hashes.commit,e.toString()),e)})});n.text(a[1]),i.append(_.append(n))}),h.append(i)}).catch(s=>t.announcer.oserror(__("Unable to get commit changes: {0}",s.toString()),s)),$(this.commit_detail_el).css("top",i.top).css("left",a).css("display","flex").css("width",`calc(100% - ${a+this.options.x_offset}px)`).css("fflex-direction","row");const l=this.commit_detail_el.getBoundingClientRect().bottom-this.options.target.getBoundingClientRect().bottom;l>0&&(this.options.target.scrollTop+=l+10)}render_commit(t,s){let e=!1;const i=$("<p />").css("padding","0").css("margin","0").css("display","block").css("height",this.options.y_offset+"px").css("line-height",this.options.y_offset+"px").css("color",s).css("vertical-align","middle").css("white-space","nowrap").css("overflow","hidden");i.addClass("git_graph_commit_message");let o=`<i class="git_graph_commit_hash">${t.hashes.commit.slice(0,8)}</i> `;t.branches=[];for(const s of t.extra.split(",").map(t=>t.trim()).filter(t=>""!=t)){let a=s.match(/HEAD -> (.*)/i);a&&2==a.length?(o+=`<i class = "git_graph_commit_branch">${a[1]}</i> `,i.addClass("git_graph_commit_current_head"),e=!0,t.branches.push(a[1]),this.current_head=t):(a=s.match(/tag: (.*)/i))?o+=`<i class = "git_graph_commit_tag">${a[1]}</i> `:(o+=`<i class = "git_graph_commit_branch">${s}</i> `,t.branches.push(s))}return o+=`<i class ="git_graph_commit_text">${t.message.split("\n")[0]}</i> `,o+=`<i class ="git_graph_commit_author">${t.committer.name}</i> `,o+=`<i class ="git_graph_commit_date">${new Date(t.committer.date).toDateString()}</i>`,i[0].innerHTML=o,i.on("click",s=>{this.open_popup(t)}),this.commits_list_element.insertBefore(i[0],this.load_more_el),t.domel=i[0],e}draw_graph(t){for(const s of t){if(this.oldest_commit_date=s.committer.date,s.extra.includes("refs/stash"))continue;this.commits[s.hashes.commit]=s;let t=this.update_line_data(s,this.current_y_offset),e=t.src;for(const s of e.filter(s=>s.x_offset!=t.dest.x_offset))this.svg_element.appendChild(this.draw_line(t.dest.x_offset,t.dest.y_offset,s.x_offset,s.y_offset,s.color));this.lines_data.sort((t,s)=>t.x_offset-s.x_offset);let i=this.options.x_offset;for(const t of this.lines_data)t.beginning&&t.y_offset>this.current_y_offset||(t.y_offset=this.current_y_offset,t.beginning||(t.x_offset>i?(this.svg_element.appendChild(this.draw_line(t.x_offset,t.y_offset-this.options.y_offset,t.x_offset-this.options.x_offset,t.y_offset,t.color)),t.x_offset=i):this.svg_element.appendChild(this.draw_line(t.x_offset,t.y_offset-this.options.y_offset,t.x_offset,t.y_offset,t.color))),i+=this.options.x_offset,t.beginning=!1);let o={cx:t.dest.x_offset,cy:t.dest.y_offset,r:4,fill:t.dest.color,stroke:"black","stroke-width":0};this.render_commit(s,t.dest.color)&&(o.r=1.5*o.r),s.cx=o.cx,s.color=o.fill;const a=this.make_svg_el("circle",o);this.svg_element.appendChild(a),this.current_y_offset+=this.options.y_offset}const s=this.svg_element.getBBox();this.svg_element.setAttribute("width",(s.x+s.width).toString()),this.svg_element.setAttribute("height",(s.y+s.height+this.options.y_offset/2).toString()),$(".git_graph_commit_message",this.commits_list_element).css("padding-left",s.x+s.width+this.options.x_offset/2+"px")}list_file(t){let s={action:"list_file",args:{commit:t}};return this.call(s)}get_changes(t,s){let e={action:"get_changes",args:{commit:s,file:t}};return this.call(e)}get_file(t,s){let e={action:"get_file",args:{commit:s,file:t}};return this.call(e)}}}(s=t.API||(t.API={}))}(OS||(OS={}));